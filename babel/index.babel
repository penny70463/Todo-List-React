
var todoItems = [];
todoItems.push({index: 1, value: "健身房", done: false});
todoItems.push({index: 2, value: "匯款", done: false});
todoItems.push({index: 3, value: "倒垃圾", done: false});
todoItems.push({index: 4, value: '回電', done: true});
todoItems.push({index: 5, value: "動物園", done: true});


class TodoList extends React.Component {
  render () {
    var items = this.props.items.map((item, index) => {
      return (
        <div><TodoListItem  item={item} index={index} removeItem={this.props.removeItem} markTodoDone={this.props.markTodoDone} /></div>
      );
    });
    return (
      <ul > {items} </ul>
    );
  }
}
  
class TodoListItem extends React.Component {
  constructor(props) {
    super(props);
    this.onClickClose = this.onClickClose.bind(this);
    this.onClickDone = this.onClickDone.bind(this);
  }
  onClickClose() {
    var index = parseInt(this.props.index);
    this.props.removeItem(index);
  }
  onClickDone() {
    var index = parseInt(this.props.index);
    this.props.markTodoDone(index);
  }
  render () {
    var todoClass = this.props.item.done ? 
        "done" : "undone";
    return(
      
      <li id='item' className={todoClass} >
        
          <a  onClick={this.onClickDone}><i className="fa fa-thumbs-up" ></i></a>&nbsp;<a  className="close" onClick={this.onClickClose}><i className="fa fa-trash " ></i></a>&nbsp;
          {this.props.item.value}
          </li>    
    );
  }
}

class TodoForm extends React.Component {
  constructor(props) {
    super(props);
    this.onSubmit = this.onSubmit.bind(this);
  }
  
  onSubmit(event) {
    event.preventDefault();
    var newItemValue = this.refs.itemName.value;
    
    if(newItemValue) {
      this.props.addItem({newItemValue});
      this.refs.form.reset();
    }
  }
  render () {
    function handleClick(){
      var x=document.getElementById('slide');
      if(x.style.display==='block'){x.style.display = "none";
     }else {x.style.display = "block";
    }}
    return (
      
      <form ref="form" onSubmit={this.onSubmit} className="form-inline">
      <h3>新增項目<a onClick={handleClick}><i className='fa fa-plus-square'></i></a></h3>
     <div id='slide'> <button type="submit" ><i className="fa fa-check-circle fa-2x"></i></button> 
      <input type="text" ref="itemName" className="form-control" placeholder="輸入事項"/>
      </div>  
      </form>
    );   
  }
}
  
class TodoHeader extends React.Component {
  
  render () {
    const {todoCount}=this.props;
    return <div><h1>Todo List-React</h1><h4>hi~Penny,你有{todoCount}件待辦</h4></div>
  }
}
  
class TodoApp extends React.Component {
  constructor (props) {
    super(props);
    this.addItem = this.addItem.bind(this);
    this.removeItem = this.removeItem.bind(this);
    this.markTodoDone = this.markTodoDone.bind(this);
    this.state = {todoItems: todoItems};
  }
  addItem(todoItem) {
    todoItems.unshift({
      index: todoItems.length+1, 
      value: todoItem.newItemValue, 
      done: false
    });
    this.setState({todoItems: todoItems});
  }
  removeItem (itemIndex) {
    todoItems.splice(itemIndex, 1);
    this.setState({todoItems: todoItems});
  }
  markTodoDone(itemIndex) {
    var todo = todoItems[itemIndex];
    todoItems.splice(itemIndex, 1);
    todo.done = !todo.done;
    todo.done ? todoItems.push(todo) : todoItems.unshift(todo);
    this.setState({todoItems: todoItems});  
  }
  render() {
    return (
      <div id="main">
        <TodoHeader todoCount={todoItems.filter((todo) => !todo.done).length}/>
      <div id='list'>
        <TodoList items={this.props.initItems} removeItem={this.removeItem} markTodoDone={this.markTodoDone}/></div>
        <TodoForm addItem={this.addItem} />
      </div>
    );
  }
}

ReactDOM.render(<TodoApp initItems={todoItems}/>, document.getElementById('app'));